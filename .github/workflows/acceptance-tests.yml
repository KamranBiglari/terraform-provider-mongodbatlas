name: 'Acceptance Tests'

on:
  workflow_dispatch: {} # workflow can be run manually
  schedule:
    - cron: "0 4 * * *" # workflow runs every day at 04:00 AM
  workflow_call: # workflow runs after code-health
  pull_request: # you can run a specic job in your PR using GitHub labels
    types: [ labeled ]

env:
  ALWAYS_RUN: ${{ github.event_name == 'workflow_dispatch' || github.event_name == 'schedule' || github.event.label.name == 'run-testacc' }}
  CI: true
  PARALLEL_GO_TEST: 20
  ACCTEST_TIMEOUT: ${{ vars.ACCTEST_TIMEOUT }}
  SKIP_TEST_EXTERNAL_CREDENTIALS: ${{ vars.SKIP_TEST_EXTERNAL_CREDENTIALS }}
  TF_LOG: ${{ vars.LOG_LEVEL }}

jobs:  
  check:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: read
      repository-projects: read
    outputs:
      cluster_outage_simulation: ${{ steps.filter.outputs.cluster_outage_simulation == 'true' || github.event.label.name == 'run-testacc-cluster-outage-simulation' || env.ALWAYS_RUN == 'true' }}
      advanced_cluster: ${{ steps.filter.outputs.advanced_cluster == 'true' || github.event.label.name == 'run-testacc-advanced-cluster' || env.ALWAYS_RUN == 'true' }}
      cluster: ${{ steps.filter.outputs.cluster == 'true' || github.event.label.name == 'run-testacc-cluster' || env.ALWAYS_RUN == 'true' }}
      generic: ${{ steps.filter.outputs.generic == 'true' || github.event.label.name == 'run-testacc-generic' || env.ALWAYS_RUN == 'true' }}
      backup_online_archive: ${{ steps.filter.outputs.backup_online_archive == 'true' || github.event.label.name == 'run-testacc-backup-online-archive' || env.ALWAYS_RUN == 'true' }}
      backup_snapshots: ${{ steps.filter.outputs.backup_snapshots == 'true' || github.event.label.name == 'run-testacc-backup-snapshots' || env.ALWAYS_RUN == 'true' }}
      federation: ${{ steps.filter.outputs.federation == 'true' || github.event.label.name == 'run-testacc-federation' || env.ALWAYS_RUN == 'true' }}
      backup_schedule: ${{ steps.filter.outputs.backup_schedule == 'true' || github.event.label.name == 'run-testacc-backup-schedule' || env.ALWAYS_RUN == 'true' }}
      project: ${{ steps.filter.outputs.project == 'true' || github.event.label.name == 'run-testacc-project' || env.ALWAYS_RUN == 'true' }}
      serverless: ${{ steps.filter.outputs.serverless == 'true' || github.event.label.name == 'run-testacc-serverless' || env.ALWAYS_RUN == 'true' }}
      network: ${{ steps.filter.outputs.network == 'true' || github.event.label.name == 'run-testacc-network' || env.ALWAYS_RUN == 'true' }}
      config: ${{ steps.filter.outputs.config == 'true' || github.event.label.name == 'run-testacc-config' || env.ALWAYS_RUN == 'true' }}
      assume_role: ${{ steps.filter.outputs.assume_role == 'true' || github.event.label.name == 'run-testacc-assume-role' || env.ALWAYS_RUN == 'true' }}
      event_trigger: ${{ steps.filter.outputs.event_trigger == 'true' || github.event.label.name == 'run-testacc-event-trigger' || env.ALWAYS_RUN == 'true' }}
      search_index: ${{ steps.filter.outputs.search_index == 'true' || github.event.label.name == 'run-testacc-search-index' || env.ALWAYS_RUN == 'true' }}
    steps:
    - uses: actions/checkout@v4
    - uses: dorny/paths-filter@v2
      id: filter
      with:
        filters: |
          assume_role:
            - 'mongodbatlas/**provider**.go'
          cluster_outage_simulation:
            - 'mongodbatlas/**cluster_outage_simulation**.go'
          advanced_cluster:
            - 'mongodbatlas/**advanced_cluster**.go'
          cluster:
            - 'mongodbatlas/**mongodbatlas_cluster**.go'
          generic:
            - 'mongodbatlas/data_source_mongodbatlas_backup_compliance_policy*.go'
            - 'mongodbatlas/resource_mongodbatlas_backup_compliance_policy*.go'
            - 'mongodbatlas/resource_mongodbatlas_x509_authentication_database_user*.go'
            - 'mongodbatlas/resource_mongodbatlas_auditing*.go'
          backup_online_archive:
            - 'mongodbatlas/**online_archive**.go'
          backup_snapshots:
            - 'mongodbatlas/**backup_snapshot**.go'
          backup_schedule:
            - 'mongodbatlas/**backup_schedule**.go'
          project:
            - 'mongodbatlas/data_source_mongodbatlas_project_invitation*.go'
            - 'mongodbatlas/fw_data_source_mongodbatlas_project_ip_access_list*.go'
            - 'mongodbatlas/resource_mongodbatlas_access_list_api_key*.go'
            - 'mongodbatlas/resource_mongodbatlas_project_invitation*.go'
            - 'mongodbatlas/fw_resource_mongodbatlas_project_ip_access_list*.go'
          serverless:
            - 'mongodbatlas/**_serverless**.go' 
          network:
            - 'mongodbatlas/**_network**.go'  
            - 'mongodbatlas/**_privatelink**.go' 
            - 'mongodbatlas/**_private_endpoint**.go'
          federation:
            - 'mongodbatlas/**_federated_database_instance**.go'
          config:
            - 'mongodbatlas/data_source_mongodbatlas_accesslist_api_key*.go'
            - 'mongodbatlas/fw_data_source_mongodbatlas_alert_configuration*.go'
            - 'mongodbatlas/data_source_mongodbatlas_api_key*.go'
            - 'mongodbatlas/data_source_mongodbatlas_cloud_provider_access_setup*.go'
            - 'mongodbatlas/data_source_mongodbatlas_cloud_provider_access*.go'
            - 'mongodbatlas/data_source_mongodbatlas_custom_db_role*.go'
            - 'mongodbatlas/data_source_mongodbatlas_custom_dns_configuration_cluster_aws*.go'
            - 'mongodbatlas/fw_data_source_mongodbatlas_database_user*.go'
            - 'mongodbatlas/data_source_mongodbatlas_maintenance_window*.go'
            - 'mongodbatlas/data_source_mongodbatlas_org_id*.go'
            - 'mongodbatlas/data_source_mongodbatlas_org_invitation*.go'
            - 'mongodbatlas/data_source_mongodbatlas_organization*.go'
            - 'mongodbatlas/data_source_mongodbatlas_project_api_key*.go'
            - 'mongodbatlas/data_source_mongodbatlas_team*.go'
            - 'mongodbatlas/fw_data_source_mongodbatlas_atlas_user*.go'
            - 'mongodbatlas/data_source_mongodbatlas_third_party_integration*.go'
            - 'mongodbatlas/resource_mongodbatlas_api_key*.go'
            - 'mongodbatlas/fw_resource_mongodbatlas_alert_configuration*.go'
            - 'mongodbatlas/resource_mongodbatlas_cloud_provider_access_setup*.go'
            - 'mongodbatlas/resource_mongodbatlas_cloud_provider_access*.go'
            - 'mongodbatlas/resource_mongodbatlas_custom_db_role*.go'
            - 'mongodbatlas/resource_mongodbatlas_custom_dns_configuration_cluster_aws*.go'
            - 'mongodbatlas/fw_resource_mongodbatlas_database_user*.go'
            - 'mongodbatlas/resource_mongodbatlas_maintenance_window*.go'
            - 'mongodbatlas/resource_mongodbatlas_org_invitation*.go'
            - 'mongodbatlas/resource_mongodbatlas_organization*.go'
            - 'mongodbatlas/resource_mongodbatlas_project_api_key*.go'
            - 'mongodbatlas/resource_mongodbatlas_team*.go'
            - 'mongodbatlas/resource_mongodbatlas_third_party_integration*.go'
          event_trigger:
            - 'mongodbatlas/resource_mongodbatlas_event_trigger*.go'
            - 'mongodbatlas/data_source_mongodbatlas_event_trigger*.go'
          search_index:
            - 'mongodbatlas/resource_mongodbatlas_search_index*.go'
  
  cluster_outage_simulation:
    needs: [ check ]
    if: ${{ needs.check.outputs.cluster_outage_simulation == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v4
        with:
          go-version-file: 'go.mod'
      - name: Acceptance Tests
        env:
          MONGODB_ATLAS_PUBLIC_KEY: ${{ secrets.MONGODB_ATLAS_PUBLIC_KEY_CLOUD_DEV }}
          MONGODB_ATLAS_PRIVATE_KEY: ${{ secrets.MONGODB_ATLAS_PRIVATE_KEY_CLOUD_DEV }}
          MONGODB_ATLAS_ORG_ID: ${{ vars.MONGODB_ATLAS_ORG_ID_CLOUD_DEV }}
          MONGODB_ATLAS_BASE_URL: ${{ vars.MONGODB_ATLAS_BASE_URL }}
          TEST_REGEX: "^TestAccOutageSimulationCluster"
        run: make testacc

  advanced_cluster:
    needs: [ check ]
    if: ${{ needs.check.outputs.advanced_cluster == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v4
        with:
          go-version-file: 'go.mod'
      - name: Acceptance Tests
        env:
          MONGODB_ATLAS_PUBLIC_KEY: ${{ secrets.MONGODB_ATLAS_PUBLIC_KEY_CLOUD_DEV }}
          MONGODB_ATLAS_PRIVATE_KEY: ${{ secrets.MONGODB_ATLAS_PRIVATE_KEY_CLOUD_DEV }}
          MONGODB_ATLAS_ORG_ID: ${{ vars.MONGODB_ATLAS_ORG_ID_CLOUD_DEV }}
          MONGODB_ATLAS_BASE_URL: ${{ vars.MONGODB_ATLAS_BASE_URL }}
          TEST_REGEX: "^TestAccClusterAdvancedCluster"
        run: make testacc

  cluster:
    needs: [ check ]
    if: ${{ needs.check.outputs.cluster == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v4
        with:
          go-version-file: 'go.mod'
      - name: Acceptance Tests
        env:
          MONGODB_ATLAS_PUBLIC_KEY: ${{ secrets.MONGODB_ATLAS_PUBLIC_KEY_CLOUD_DEV }}
          MONGODB_ATLAS_PRIVATE_KEY: ${{ secrets.MONGODB_ATLAS_PRIVATE_KEY_CLOUD_DEV }}
          MONGODB_ATLAS_ORG_ID: ${{ vars.MONGODB_ATLAS_ORG_ID_CLOUD_DEV }}
          MONGODB_ATLAS_BASE_URL: ${{ vars.MONGODB_ATLAS_BASE_URL }}
          TEST_REGEX: "^TestAccClusterRSCluster"
        run: make testacc

  generic: # Acceptance tests that do not use any time-consuming resource (example: cluster)
    needs: [ check ]
    if: ${{ needs.check.outputs.generic == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v4
        with:
          go-version-file: 'go.mod'
      - name: Acceptance Tests
        env:
          MONGODB_ATLAS_PUBLIC_KEY: ${{ secrets.MONGODB_ATLAS_PUBLIC_KEY_CLOUD_DEV }}
          MONGODB_ATLAS_PRIVATE_KEY: ${{ secrets.MONGODB_ATLAS_PRIVATE_KEY_CLOUD_DEV }}
          CA_CERT: ${{ secrets.CA_CERT }}
          MONGODB_ATLAS_ORG_ID: ${{ vars.MONGODB_ATLAS_ORG_ID_CLOUD_DEV }}
          MONGODB_ATLAS_BASE_URL: ${{ vars.MONGODB_ATLAS_BASE_URL }}
          MONGODB_ATLAS_PROJECT_OWNER_ID: ${{ vars.MONGODB_ATLAS_PROJECT_OWNER_ID }}
          TEST_REGEX: "^TestAccGeneric"
        run: |
          make testacc

  backup_online_archive:
    needs: [ check ]
    if: ${{ needs.check.outputs.backup_online_archive == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v4
        with:
          go-version-file: 'go.mod'
      - name: Acceptance Tests
        env:
          MONGODB_ATLAS_PUBLIC_KEY: ${{ secrets.MONGODB_ATLAS_PUBLIC_KEY_CLOUD_DEV }}
          MONGODB_ATLAS_PRIVATE_KEY: ${{ secrets.MONGODB_ATLAS_PRIVATE_KEY_CLOUD_DEV }}
          MONGODB_ATLAS_ORG_ID: ${{ vars.MONGODB_ATLAS_ORG_ID_CLOUD_DEV }}
          MONGODB_ATLAS_BASE_URL: ${{ vars.MONGODB_ATLAS_BASE_URL }}
          MONGODB_ATLAS_PROJECT_OWNER_ID: ${{ vars.MONGODB_ATLAS_PROJECT_OWNER_ID }}
          TEST_REGEX: "^TestAccBackupRSOnlineArchive"
        run: make testacc

  backup_snapshots:
    needs: [ check ]
    if: ${{ needs.check.outputs.backup_snapshots == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v4
        with:
          go-version-file: 'go.mod'
      - name: Acceptance Tests
        env:
          MONGODB_ATLAS_PUBLIC_KEY: ${{ secrets.MONGODB_ATLAS_PUBLIC_KEY_CLOUD_DEV }}
          MONGODB_ATLAS_PRIVATE_KEY: ${{ secrets.MONGODB_ATLAS_PRIVATE_KEY_CLOUD_DEV }}
          MONGODB_ATLAS_ORG_ID: ${{ vars.MONGODB_ATLAS_ORG_ID_CLOUD_DEV }}
          MONGODB_ATLAS_BASE_URL: ${{ vars.MONGODB_ATLAS_BASE_URL }}
          MONGODB_ATLAS_PROJECT_OWNER_ID: ${{ vars.MONGODB_ATLAS_PROJECT_OWNER_ID }}
          TEST_REGEX: "^TestAccBackupRSCloudBackupSnapshot"
        run: make testacc
        
  backup_schedule:
    needs: [ check ]
    if: ${{ needs.check.outputs.backup_schedule == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v4
        with:
          go-version-file: 'go.mod'
      - name: Acceptance Tests
        env:
          MONGODB_ATLAS_PUBLIC_KEY: ${{ secrets.MONGODB_ATLAS_PUBLIC_KEY_CLOUD_DEV }}
          MONGODB_ATLAS_PRIVATE_KEY: ${{ secrets.MONGODB_ATLAS_PRIVATE_KEY_CLOUD_DEV }}
          MONGODB_ATLAS_ORG_ID: ${{ vars.MONGODB_ATLAS_ORG_ID_CLOUD_DEV }}
          MONGODB_ATLAS_BASE_URL: ${{ vars.MONGODB_ATLAS_BASE_URL }}
          MONGODB_ATLAS_PROJECT_OWNER_ID: ${{ vars.MONGODB_ATLAS_PROJECT_OWNER_ID }}
          TEST_REGEX: "^TestAccBackupRSCloudBackupSchedule"
        run: make testacc
  project: 
    needs: [ check ]
    if: ${{ needs.check.outputs.project == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v4
        with:
          go-version-file: 'go.mod'
      - name: Acceptance Tests
        env:
          MONGODB_ATLAS_PUBLIC_KEY: ${{ secrets.MONGODB_ATLAS_PUBLIC_KEY_CLOUD_DEV }}
          MONGODB_ATLAS_PRIVATE_KEY: ${{ secrets.MONGODB_ATLAS_PRIVATE_KEY_CLOUD_DEV }}
          MONGODB_ATLAS_ORG_ID: ${{ vars.MONGODB_ATLAS_ORG_ID_CLOUD_DEV }}
          MONGODB_ATLAS_BASE_URL: ${{ vars.MONGODB_ATLAS_BASE_URL }}
          MONGODB_ATLAS_PROJECT_OWNER_ID: ${{ vars.MONGODB_ATLAS_PROJECT_OWNER_ID }}
          MONGODB_ATLAS_API_KEYS_IDS: ${{ vars.MONGODB_ATLAS_API_KEYS_IDS }}
          MONGODB_ATLAS_TEAMS_IDS: ${{ vars.MONGODB_ATLAS_TEAMS_IDS }}
          TEST_REGEX: "^TestAccProject"
        run: make testacc
  serverless:
    needs: [ check ]
    if: ${{ needs.check.outputs.serverless == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v4
        with:
          go-version-file: 'go.mod'
      - name: Acceptance Tests
        env:
          MONGODB_ATLAS_PUBLIC_KEY: ${{ secrets.MONGODB_ATLAS_PUBLIC_KEY_CLOUD_DEV }}
          MONGODB_ATLAS_PRIVATE_KEY: ${{ secrets.MONGODB_ATLAS_PRIVATE_KEY_CLOUD_DEV }}
          MONGODB_ATLAS_ORG_ID: ${{ vars.MONGODB_ATLAS_ORG_ID_CLOUD_DEV }}
          MONGODB_ATLAS_BASE_URL: ${{ vars.MONGODB_ATLAS_BASE_URL }}
          TEST_REGEX: "^TestAccServerless"
        run: make testacc
  network:
    needs: [ check ]
    if: ${{ needs.check.outputs.network == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v4
        with:
          go-version-file: 'go.mod'
      - name: Acceptance Tests
        env:
          MONGODB_ATLAS_PUBLIC_KEY: ${{ secrets.MONGODB_ATLAS_PUBLIC_KEY_CLOUD_DEV_NETWORK }}
          MONGODB_ATLAS_PRIVATE_KEY: ${{ secrets.MONGODB_ATLAS_PRIVATE_KEY_CLOUD_DEV_NETWORK }}
          MONGODB_ATLAS_ORG_ID: ${{ vars.MONGODB_ATLAS_ORG_ID_CLOUD_DEV_NETWORK }}
          MONGODB_ATLAS_PROJECT_ID: ${{ vars.MONGODB_ATLAS_PROJECT_ID_CLOUD_DEV_NETWORK }}
          MONGODB_ATLAS_BASE_URL: ${{ vars.MONGODB_ATLAS_BASE_URL }}
          MONGODB_ATLAS_ENABLE_BETA: ${{ vars.MONGODB_ATLAS_ENABLE_BETA }}
          MONGODB_ATLAS_ENDPOINT_ID: ${{ vars.MONGODB_ATLAS_AWS_ENDPOINT_ID_NETWORK }} 
          AWS_REGION: ${{ vars.AWS_REGION }}
          TEST_REGEX: "^TestAccNetwork"
        run: make testacc

  federation:
    needs: [ check ]
    if: ${{ needs.check.outputs.federation == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v4
        with:
          go-version-file: 'go.mod'
      - name: Acceptance Tests
        env:
          MONGODB_ATLAS_PUBLIC_KEY: ${{ secrets.MONGODB_ATLAS_PUBLIC_KEY_CLOUD_DEV }}
          MONGODB_ATLAS_PRIVATE_KEY: ${{ secrets.MONGODB_ATLAS_PRIVATE_KEY_CLOUD_DEV }}
          MONGODB_ATLAS_ORG_ID: ${{ vars.MONGODB_ATLAS_ORG_ID_CLOUD_DEV }}
          MONGODB_ATLAS_BASE_URL: ${{ vars.MONGODB_ATLAS_BASE_URL }}
          TEST_REGEX: "^TestAccFederatedDatabaseInstance"
        run: make testacc
      
  config:
    needs: [ check ]
    if: ${{ needs.check.outputs.config == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v4
        with:
          go-version-file: 'go.mod'
      - name: Acceptance Tests
        env:
          MONGODB_ATLAS_PUBLIC_KEY: ${{ secrets.MONGODB_ATLAS_PUBLIC_KEY_CLOUD_DEV_NETWORK }}
          MONGODB_ATLAS_PRIVATE_KEY: ${{ secrets.MONGODB_ATLAS_PRIVATE_KEY_CLOUD_DEV_NETWORK }}
          MONGODB_ATLAS_ORG_ID: ${{ vars.MONGODB_ATLAS_ORG_ID_CLOUD_DEV_NETWORK }}
          MONGODB_ATLAS_BASE_URL: ${{ vars.MONGODB_ATLAS_BASE_URL }}
          MONGODB_ATLAS_PROJECT_OWNER_ID: ${{ vars.MONGODB_ATLAS_PROJECT_OWNER_ID }}
          MONGODB_ATLAS_USERNAME_CLOUD_DEV: ${{ vars.MONGODB_ATLAS_USERNAME_CLOUD_DEV }}
          AZURE_ATLAS_APP_ID: ${{vars.AZURE_ATLAS_APP_ID}}
          AZURE_SERVICE_PRINCIPAL_ID: ${{vars.AZURE_SERVICE_PRINCIPAL_ID}}
          AZURE_TENANT_ID: ${{vars.AZURE_TENANT_ID}}
          TEST_REGEX: "^TestAccConfig"
        run: make testacc

  assume_role:
    needs: [ check]
    if: ${{ needs.check.outputs.assume_role == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v4
        with:
          go-version-file: 'go.mod'
      - id: sts-assume-role
        name: Generate STS Temporary credential for acceptance testing
        shell: bash
        env:
          AWS_REGION: ${{ vars.AWS_REGION }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          ASSUME_ROLE_ARN: ${{ vars.ASSUME_ROLE_ARN }}
        run: bash ./scripts/generate-credentials-with-sts-assume-role.sh
      - name: Acceptance Tests
        env:
          ASSUME_ROLE_ARN: ${{ vars.ASSUME_ROLE_ARN }}
          AWS_REGION: ${{ vars.AWS_REGION }}
          STS_ENDPOINT: ${{ vars.STS_ENDPOINT }}
          SECRET_NAME: ${{ vars.AWS_SECRET_NAME }}
          AWS_ACCESS_KEY_ID: ${{ steps.sts-assume-role.outputs.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ steps.sts-assume-role.outputs.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ steps.sts-assume-role.outputs.AWS_SESSION_TOKEN }}
          MONGODB_ATLAS_ORG_ID: ${{ vars.MONGODB_ATLAS_ORG_ID_CLOUD_DEV }}
          MONGODB_ATLAS_BASE_URL: ${{ vars.MONGODB_ATLAS_BASE_URL }}
          SKIP_TEST_EXTERNAL_CREDENTIALS: false
          TEST_REGEX: "^TestAccSTSAssumeRole"
        run: make testacc

  search_index:
    needs: [ check ]
    if: ${{ needs.check.outputs.search_index == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v4
        with:
          go-version-file: 'go.mod'
      - name: Acceptance Tests
        env:
          MONGODB_ATLAS_BASE_URL: ${{ vars.MONGODB_ATLAS_BASE_URL }}
          MONGODB_ATLAS_PUBLIC_KEY: ${{ secrets.MONGODB_ATLAS_PUBLIC_KEY_CLOUD_DEV }}
          MONGODB_ATLAS_PRIVATE_KEY: ${{ secrets.MONGODB_ATLAS_PRIVATE_KEY_CLOUD_DEV }}
          MONGODB_ATLAS_ORG_ID: ${{ vars.MONGODB_ATLAS_ORG_ID_CLOUD_DEV }}
          MONGODB_ATLAS_PROJECT_ID: ${{ vars.MONGODB_ATLAS_ACCTEST_SEARCH_INDEX_PROJECT_ID_CLOUD_DEV }}
          TEST_REGEX: "^TestAccSearchIndex"
        run: make testacc
  