---
layout: "mongodbatlas"
page_title: "MongoDB Atlas: mongodbatlas_database_users"
subcategory: "docs_mongodbatlas_database_users_data source"
description: |-
  `mongodbatlas_database_users` describe all Database Users. This represents a database user which will be applied to all clusters within the project.
  
  Each user has a set of roles that provide access to the project’s databases. User's roles apply to all the clusters in the project: if two clusters have a `products` database and a user has a role granting `read` access on the products database, the user has that access on both clusters.
---

# Data Source: mongodbatlas_database_users

`mongodbatlas_database_users` describe all Database Users. This represents a database user which will be applied to all clusters within the project.

Each user has a set of roles that provide access to the project’s databases. User's roles apply to all the clusters in the project: if two clusters have a `products` database and a user has a role granting `read` access on the products database, the user has that access on both clusters.

## Example Usages

```terraform
resource "mongodbatlas_database_user" "user1" {
  username           = var.user[0]
  password           = var.password[0]
  project_id         = mongodbatlas_project.project1.id
  auth_database_name = "admin"

  roles {
    role_name     = "readWrite"
    database_name = var.database_name[0]
  }
  labels {
    key   = "Name"
    value = "DB User1"
  }

  scopes {
    name = mongodbatlas_cluster.cluster.name
    type = "CLUSTER"
  }

  scopes {
    name = mongodbatlas_cluster.cluster2.name
    type = "CLUSTER"
  }
}

data "mongodbatlas_database_user" "user1" {
  username           = mongodbatlas_database_user.user1.username
  project_id         = mongodbatlas_database_user.user1.project_id
  auth_database_name = "admin"
}

data "mongodbatlas_database_users" "allUsers" {
  project_id = mongodbatlas_database_user.user1.project_id
}

output "user1" {
  value = mongodbatlas_database_user.user1.username
}
```

<!-- schema generated by tfplugindocs -->
## Schema

### Required

- `project_id` (String) The unique ID for the project to create the database user.

### Read-Only

- `id` (String) ID used during the resource import. Database users can be imported using project ID and username, in the format `project_id-username-auth_database_name`
- `results` (Attributes List) (see [below for nested schema](#nestedatt--results))

<a id="nestedatt--results"></a>
### Nested Schema for `results`

Read-Only:

- `auth_database_name` (String) The unique ID for the project to create the database user.
- `aws_iam_type` (String) If this value is set, the new database user authenticates with AWS IAM credentials. If no value is given, Atlas uses the default value of NONE. The accepted types are:
	* `NONE` -	The user does not use AWS IAM credentials.
	* `USER` - New database user has AWS IAM user credentials.
	* `ROLE` -  New database user has credentials associated with an AWS IAM role.
- `id` (String) ID used during the resource import. Database users can be imported using project ID and username, in the format `project_id-username-auth_database_name`
- `labels` (Attributes Set) Containing key-value pairs that tag and categorize the database user. Each key and value has a maximum length of 255 characters. (see [below for nested schema](#nestedatt--results--labels))
- `ldap_auth_type` (String) Method by which the provided `username` is authenticated. If no value is given, Atlas uses the default value of `NONE`.
	* `NONE` -	Atlas authenticates this user through [SCRAM-SHA](https://docs.mongodb.com/manual/core/security-scram/), not LDAP.
	* `USER` - LDAP server authenticates this user through the user's LDAP user. `username` must also be a fully qualified distinguished name, as defined in [RFC-2253](https://tools.ietf.org/html/rfc2253).
	* `GROUP` - LDAP server authenticates this user using their LDAP user and authorizes this user using their LDAP group. To learn more about LDAP security, see [Set up User Authentication and Authorization with LDAP](https://docs.atlas.mongodb.com/security-ldaps). `username` must also be a fully qualified distinguished name, as defined in [RFC-2253](https://tools.ietf.org/html/rfc2253).
- `password` (String, Sensitive) User's initial password. A value is required to create the database user, however the argument but may be removed from your Terraform configuration after user creation without impacting the user, password or Terraform management."
	~> **IMPORTANT:**  --- Passwords may show up in Terraform related logs and it will be stored in the Terraform state file as plain-text. Password can be changed after creation using your preferred method, e.g. via the MongoDB Atlas UI, to ensure security.  If you do change management of the password to outside of Terraform be sure to remove the argument from the Terraform configuration so it is not inadvertently updated to the original password.
- `project_id` (String) The unique ID for the project to create the database user.
- `roles` (Attributes Set) Block mapping a user's role to a database / collection. A role allows the user to perform particular actions on the specified database. A role on the admin database can include privileges that apply to the other databases as well.

	-> **NOTE:** The available privilege actions for custom MongoDB roles support a subset of MongoDB commands. See Unsupported Commands in M10+ Clusters for more information.
	
	~> **IMPORTANT:** If a user is assigned a custom MongoDB role, they cannot be assigned any other roles. (see [below for nested schema](#nestedatt--results--roles))
- `scopes` (Attributes Set) Array of clusters and Atlas Data Lakes that this user has access to. If omitted, Atlas grants the user access to all the clusters and Atlas Data Lakes in the project by default. (see [below for nested schema](#nestedatt--results--scopes))
- `username` (String) Username for authenticating to MongoDB. USER_ARN or ROLE_ARN if `aws_iam_type` is `USER` or `ROLE`.
- `x509_type` (String) X.509 method by which the provided username is authenticated. If no value is given, Atlas uses the default value of NONE. The accepted types are:
	* `NONE` -	The user does not use X.509 authentication.
	* `MANAGED` - The user is being created for use with Atlas-managed X.509.Externally authenticated users can only be created on the `$external` database.
	* `CUSTOMER` -  The user is being created for use with Self-Managed X.509. Users created with this x509Type require a Common Name (CN) in the username field. Externally authenticated users can only be created on the `$external` database.

<a id="nestedatt--results--labels"></a>
### Nested Schema for `results.labels`

Read-Only:

- `key` (String) The key that you want to write.
- `value` (String) The value that you want to write.


<a id="nestedatt--results--roles"></a>
### Nested Schema for `results.roles`

Read-Only:

- `collection_name` (String) Collection for which the role applies. You can specify a collection for the `read` and `readWrite` roles. If you do not specify a collection for `read` and `readWrite`, the role applies to all collections in the database (excluding some collections in the `system`. database).
- `database_name` (String) Database on which the user has the specified role. A role on the `admin` database can include privileges that apply to the other databases.
- `role_name` (String) Name of the role to grant. See [Create a Database User](https://docs.atlas.mongodb.com/reference/api/database-users-create-a-user/) `roles.roleName` for valid values and restrictions.


<a id="nestedatt--results--scopes"></a>
### Nested Schema for `results.scopes`

Read-Only:

- `name` (String) Name of the cluster or Atlas Data Lake that the user has access to.
- `type` (String) Type of resource that the user has access to. Valid values are: `CLUSTER` and `DATA_LAKE`
